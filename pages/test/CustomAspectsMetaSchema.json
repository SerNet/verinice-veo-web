{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "http://example.com/example.json",
  "type": "object",
  "title": "The custom aspect meta schema",
  "description": "The root schema comprises the entire JSON document.",
  "default": {
    
  },
  "required": [
    "type",
    "properties"
  ],
  "properties": {
    "type": {
      "$id": "#/properties/type",
      "type": "string",
      "default": "object"
    },
    "properties": {
      "$id": "#/properties/properties",
      "type": "object",
      "title": "The properties of the object",
      "description": "An explanation about the purpose of this instance.",
      "default": {
        
      },
      "required": [
        "id",
        "domains",
        "attributes",
        "applicableTo"
      ],
      "properties": {
        "id": {
          "const": {
            "type": "string",
            "title": "The UUID to identify the element",
            "format": "regex",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        },
        "applicableTo": {
          "const": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "domains": {
          "$id": "#/properties/properties/properties/domains",
          "const": {
            "type": "array",
            "title": "The list of domains in which this element is present.",
            "description": "The ids of elements of the type domain.",
            "items": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "A friendly human readable title of the referenced domain."
                },
                "targetUri": {
                  "type": "string",
                  "description": "The resource URL of the referenced domain."
                }
              },
              "required": [
                "targetUri"
              ]
            },
            "uniqueItems": true
          }
        },
        "references": {
          "const": {
            "type": "array",
            "items": {
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "A friendly human readable title of the referenced object."
                },
                "targetUri": {
                  "type": "string",
                  "description": "The resource URL of the referenced object."
                }
              },
              "required": [
                "targetUri"
              ]
            }
          }
        },
        "attributes": {
          "$id": "#/properties/properties/properties/attributes",
          "type": "object",
          "title": "The attributes definition",
          "default": {
            
          },
          "required": [
            "type",
            "properties"
          ],
          "properties": {
            "type": {
              "$id": "#/properties/properties/properties/attributes/properties/type",
              "type": "string",
              "default": "object"
            },
            "properties": {
              "$id": "#/properties/properties/properties/attributes/properties/properties",
              "type": "object",
              "title": "The attributes of the object.",
              "description": "The list of the defined attributes of this custom aspect. The name of the properties must match the following regular expression : ^[a-z][a-zA-Z0-9_]*$",
              "patternProperties": {
                "^[a-z][a-zA-Z0-9_]*$": {
                  "description": "Define a distinct set of types allowed for element schemas. Distinction allows treating properties as strictly typed.",
                  "oneOf": [
                    {
                      "$ref": "#/definitions/string"
                    },
                    {
                      "$ref": "#/definitions/uri"
                    },
                    {
                      "$ref": "#/definitions/boolean"
                    },
                    {
                      "$ref": "#/definitions/integer"
                    },
                    {
                      "$ref": "#/definitions/number"
                    },
                    {
                      "$ref": "#/definitions/dateTime"
                    },
                    {
                      "$ref": "#/definitions/date"
                    },
                    {
                      "$ref": "#/definitions/predefined-integer"
                    },
                    {
                      "$ref": "#/definitions/predefined-string"
                    },
                    {
                      "$ref": "#/definitions/predefined-number"
                    },
                    {
                      "$ref": "#/definitions/array-of-predefined-strings"
                    }
                  ]
                }
              },
              "additionalProperties": true
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "additionalProperties": {
      "type": "boolean",
      "const": false
    },
    "required": {
      "type": "array",
      "const": []
    }
  },
  "additionalProperties": false,
  "definitions": {
    "string": {
      "type": "object",
      "properties": {
        "type": {
          "const": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "type",
        "title"
      ],
      "additionalProperties": false
    },
    "uri": {
      "type": "object",
      "properties": {
        "type": {
          "const": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "examples": {
          "type": "array"
        },
        "format": {
          "type": "string",
          "const": "uri"
        }
      },
      "required": [
        "type",
        "title",
        "format"
      ],
      "additionalProperties": false
    },
    "boolean": {
      "type": "object",
      "properties": {
        "type": {
          "const": "boolean"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "title"
      ],
      "additionalProperties": false
    },
    "number": {
      "type": "object",
      "properties": {
        "type": {
          "const": "number"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "title"
      ],
      "additionalProperties": false
    },
    "integer": {
      "type": "object",
      "properties": {
        "type": {
          "const": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "title"
      ],
      "additionalProperties": false
    },
    "dateTime": {
      "type": "object",
      "properties": {
        "type": {
          "const": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "const": "date-time"
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "type",
        "title",
        "format"
      ]
    },
    "date": {
      "type": "object",
      "properties": {
        "type": {
          "const": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "const": "date"
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "type",
        "title",
        "format"
      ]
    },
    "predefined": {
      "description": "A predefined property is a property for which only a predefined primitive value set is valid, similar to an enum.",
      "oneOf": [
        {
          "$ref": "#/definitions/predefined-string"
        },
        {
          "$ref": "#/definitions/predefined-integer"
        },
        {
          "$ref": "#/definitions/predefined-number"
        }
      ]
    },
    "predefined-string": {
      "properties": {
        "type": {
          "const": "string"
        },
        "title": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "enum"
      ]
    },
    "predefined-number": {
      "properties": {
        "type": {
          "const": "number"
        },
        "title": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "enum"
      ]
    },
    "predefined-integer": {
      "properties": {
        "type": {
          "const": "integer"
        },
        "title": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "enum",
        "type"
      ]
    },
    "array-of-predefined-strings": {
      "properties": {
        "description": {
          "type": "string"
        },
        "type": {
          "const": "array"
        },
        "title": {
          "type": "string"
        },
        "items": {
          "properties": {
            "enum": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "enum"
          ]
        }
      },
      "required": [
        "type",
        "items"
      ]
    },
    "set": {
      "type": "object",
      "description": "A set is an array but can only contain unique primitive values.",
      "properties": {
        "type": {
          "const": "array"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "items": {
          "enum": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "number"
            }
          ]
        },
        "uniqueItems": {
          "const": true
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "type",
        "title",
        "items",
        "uniqueItems"
      ]
    },
    "subset": {
      "type": "object",
      "description": "A subset is an array but can only contain unique values of a predefined set.",
      "properties": {
        "type": {
          "const": "array"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/predefined"
        },
        "uniqueItems": {
          "const": true
        },
        "examples": {
          "type": "array"
        }
      },
      "required": [
        "type",
        "title",
        "items",
        "uniqueItems"
      ]
    }
  }
}