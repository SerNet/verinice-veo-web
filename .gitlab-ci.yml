stages:
  - setup
  - build
  - test
  - deploy

default:
  image: node:19
  cache:  # Cache modules in between jobs
    key:
      files:
      - package-lock.json
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline

store_project_version:
  before_script: []
  cache: []
  stage: setup
  script:
    - echo "PROJECT_VERSION=$(node -p "require('./package.json').version")" >> variables.env
  interruptible: true
  artifacts:
    when: always
    reports:
      dotenv: variables.env

check_license:
  stage: test
  needs: []
  script:
    - mv LICENSE-3RD-PARTY.txt LICENSE-3RD-PARTY.txt.orig
    - npx generate-license-file --ci --input ./package.json --output LICENSE-3RD-PARTY.txt
    - diff LICENSE-3RD-PARTY.txt LICENSE-3RD-PARTY.txt.orig
    - if [ $? -ne 0 ]; then echo "LICENSE-3RD-PARTY.txt is not up to date, please re-run npx generate-license-file --input ./package.json --output LICENSE-3RD-PARTY.txt --overwrite"; exit 1; fi
  interruptible: true

docker_image:
  stage: build
  needs: ["store_project_version"]
  image:
    name: gcr.io/kaniko-project/executor:v1.16.0-debug
    entrypoint: [""]
  variables:
    IMAGE_NAME: eu.gcr.io/veo-projekt/veo-web
    # this does not work in Gitlab < 15.7, so we need the before_script workaround
    # GOOGLE_APPLICATION_CREDENTIALS: $GCR_ACCESS_TOKEN
  before_script:
    - export GOOGLE_APPLICATION_CREDENTIALS=${GCR_ACCESS_TOKEN}
  script:
    - |-
      VEO_DEBUG=false
      NODE_ENV=production
      if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then
        export VEO_DEBUG="true"
        export NODE_ENV="development"
      fi
      TAG_SUFFIX=
      if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export TAG_SUFFIX="-prod"; fi;
      DESTINATION_ARG="--destination $IMAGE_NAME:git-${CI_COMMIT_SHA} --destination $IMAGE_NAME:pipeline-id-${CI_PIPELINE_ID}$TAG_SUFFIX"
      if [ -n "$CI_COMMIT_TAG" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:$CI_COMMIT_TAG$TAG_SUFFIX";
        if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:latest-prod"; fi;
      fi;
      if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:develop"; fi;
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --cache=true
      $DESTINATION_ARG
      --build-arg VEO_DEBUG="${VEO_DEBUG}"
      --build-arg NODE_ENV="${NODE_ENV}"
      --build-arg CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}
      --build-arg CI_JOB_ID=${CI_JOB_ID}
      --label org.opencontainers.image.version="${PROJECT_VERSION}"
      --label org.opencontainers.image.revision=${CI_COMMIT_SHA}
      --build-arg "ftp_proxy=${ftp_proxy}"
      --build-arg "FTP_PROXY=${ftp_proxy}"
      --build-arg "http_proxy=${http_proxy}"
      --build-arg "HTTP_PROXY=${http_proxy}"
      --build-arg "https_proxy=${https_proxy}"
      --build-arg "HTTPS_PROXY=${https_proxy}"
      --build-arg "no_proxy=${no_proxy}"
      --build-arg "NO_PROXY=${no_proxy}"
  interruptible: true

trigger_deployment:
  stage: deploy
  only:
    - develop
    - master
  trigger:
    project: veo/verinice-veo-deployment
